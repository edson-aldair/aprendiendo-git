
//COMANDOS GIT Y SUS DEFINICIONES

git --version = para ver la version de git en la que nos encontramos
git help      = para ver la ayuda de git( ver todos los comandos)
git config --global user.name "edson mendoza ramirez" = en la configuracion de git guardamos nuestro nombre
git config --global user.email "email@gmail.com" = en la configuracion de git guardamos nuestro correo
git config --global -e = para ver todas las configuraciones globales que tenemos
git init = para crear o inicializar nuestro repositorio(proyecto)
git status = para ver el estado actual de nuestro repositorio
git status --short = para ver el estado actual de nuestro repositorio de manera corta
[git add . | git add nombre-archivo| git add nombre-carpeta/] = para subir al stage los archivos
git reset nombre-archivo = baja del stage el archivo seleccionado
git commit -m "mensaje del commit" = para hacer una fotografia en el momento de nuestro repositorio
git commit -am "mensaje del commit" = sube al stage los cambios y hace una fotografia en el momento de nuestro repositorio, solo funciona si le estamos dando seguimiento al archivo
git checkout -- . = para reconstruir nuestro proyecto a como estaba en el ultimo commit(siempre y cuando se le esté dando seguimiento)
git branch = nos dice en que rama nos encontramos trabajando
git branch -m master main = cambiamos el nombre de la rama master por main en el repositorio actual
git config --global init.defaultBranch main = en la configuracion global de git le decimos que cuando cree un nuevo repositorio lo inicialicemos el nombre de la rama con main 
git log = para ver los log de nuestro repositorio
git log --oneline = ver los log de manera corta
git config --global alias.s "comando" = crear un alias para el comando seleccionado
git diff = nos muestra los cambios que se hicieron al repositorio(solo se muestra cuando los cambios no se han subido al stage)
git diff --staged = nos muestra los cambios que se hicieron al repositorio(muestra cambios que se subieron al stage)
git commit --amend -m "nuevo nombre del commit" = cambia el nombre del mensaje del ultimo commit
git reset --soft HEAD^ = mueveme al commit antes del HEAD y elimina los commits posteriores
git commit --amend = entramos al modo de edición para cambiar el mensaje del umtimo commitgit 
git reset --soft HASH = elimina los commits posteriores al hash, los cambios de los commits posteriores los mantiene(no los borra) y estos los pone en el stage.
git reset --mixed HASH = elimina los commits posteriores al hash, los cambios de los commits posteriores se matienen(no los borra) pero estos no se encuentran en el stage.
git reset --hard HASH = elimina los commits posteriores al hash, elimina los cambios de los commits posteriores(es decir no se encuentran ni en el stage ni en el directorio de trabajo).
git reflog = es una referencia de todo lo que ha sucedido cronologicamente
git mv viejo-nombre.md nuevo-nombre.md = para cambiar el nombre de nuestro archivo
git rm nombre-archivo.md = para eliminar el archivo
git reset --hard = reconstruye tu proyecto a como estaba en el ultimo commit(parecido al git checkout -- .)

//hablando de branch o ramas
fast-forward: git detecta que no hay ningun cambio en la rama principal, entonces añade la otra rama de forma normal.
unión automatica: git detecta que hubo cambios en la rama principal, y lo añade al final.
uniónmanual: donde git no puede resolver de forma automatica, si hicimos modificaciones en la rama2 que afecta las mismas lineas en los archivos en la rama principal

git branch nombre-rama: crear una rama
git checkout nombre-rama: nos movemos a la rama
git merge nombre-rama: hacemos la union de la rama hacia otra(principal)
git branch -d nombre-rama: eliminamos la rama
git branch -d nombre-rama -f: eliminamosla rama de manera forzosa
git checkout -b nombre-rama: creamos una rama y nos movemos hacia ella 
