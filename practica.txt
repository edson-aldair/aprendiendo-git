
//COMANDOS GIT Y SUS DEFINICIONES

git --version = para ver la version de git en la que nos encontramos
git help      = para ver la ayuda de git( ver todos los comandos)
git config --global user.name "edson mendoza ramirez" = en la configuracion de git guardamos nuestro nombre
git config --global user.email "email@gmail.com" = en la configuracion de git guardamos nuestro correo
git config --global -e = para ver todas las configuraciones globales que tenemos
git init = para crear o inicializar nuestro repositorio(proyecto)
git status = para ver el estado actual de nuestro repositorio
git status --short = para ver el estado actual de nuestro repositorio de manera corta
[git add . | git add nombre-archivo| git add nombre-carpeta/] = para subir al stage los archivos
git reset nombre-archivo = baja del stage el archivo seleccionado
git commit -m "mensaje del commit" = para hacer una fotografia en el momento de nuestro repositorio
git commit -am "mensaje del commit" = sube al stage los cambios y hace una fotografia en el momento de nuestro repositorio, solo funciona si le estamos dando seguimiento al archivo
git checkout -- . = para reconstruir nuestro proyecto a como estaba en el ultimo commit(siempre y cuando se le esté dando seguimiento)
git branch = nos dice en que rama nos encontramos trabajando
git branch -m master main = cambiamos el nombre de la rama master por main en el repositorio actual
git config --global init.defaultBranch main = en la configuracion global de git le decimos que cuando cree un nuevo repositorio lo inicialicemos el nombre de la rama con main 
git log = para ver los log de nuestro repositorio
git log --oneline = ver los log de manera corta
git config --global alias.s "comando" = crear un alias para el comando seleccionado
git diff = nos muestra los cambios que se hicieron al repositorio(solo se muestra cuando los cambios no se han subido al stage)
git diff --staged = nos muestra los cambios que se hicieron al repositorio(muestra cambios que se subieron al stage)
git commit --amend -m "nuevo nombre del commit" = cambia el nombre del mensaje del ultimo commit
git reset --soft HEAD^ = mueveme al commit antes del HEAD y elimina los commits posteriores
git commit --amend = entramos al modo de edición para cambiar el mensaje del umtimo commitgit 
git reset --soft HASH = elimina los commits posteriores al hash, los cambios de los commits posteriores los mantiene(no los borra) y estos los pone en el stage.
git reset --mixed HASH = elimina los commits posteriores al hash, los cambios de los commits posteriores se matienen(no los borra) pero estos no se encuentran en el stage.
git reset --hard HASH = elimina los commits posteriores al hash, elimina los cambios de los commits posteriores(es decir no se encuentran ni en el stage ni en el directorio de trabajo).
git reflog = es una referencia de todo lo que ha sucedido cronologicamente
git mv viejo-nombre.md nuevo-nombre.md = para cambiar el nombre de nuestro archivo
git rm nombre-archivo.md = para eliminar el archivo
git reset --hard = reconstruye tu proyecto a como estaba en el ultimo commit(parecido al git checkout -- .)

//hablando de branch o ramas
fast-forward: git detecta que no hay ningun cambio en la rama principal, entonces añade la otra rama de forma normal.
unión automatica: git detecta que hubo cambios en la rama principal, y lo añade al final.
uniónmanual: donde git no puede resolver de forma automatica, si hicimos modificaciones en la rama2 que afecta las mismas lineas en los archivos en la rama principal

git branch nombre-rama: crear una rama
git checkout nombre-rama: nos movemos a la rama
git merge nombre-rama: hacemos la union de la rama hacia otra(principal)
git branch -d nombre-rama: eliminamos la rama
git branch -d nombre-rama -f: eliminamosla rama de manera forzosa
git checkout -b nombre-rama: creamos una rama y nos movemos hacia ella 

//hablando de etiquetas o tag
tag: son una referencia a un commit en especifico y a todo el estado del proyecto en ese punto en especifico

git tag nombre-tag: creamos un tag apuntando al ultimo commit
git tag: para ver todos los tag
git tag -d nombre-tag: para eliminar el tag especifico 
git tag -a v1.0.0 -m "mensaje": crea un tag con un nombre de versionamiento y un mensaje de referencia, ademas de apuntar al ultimo commit
git tag -a v1.0.0 HASH -m "mensaje": creamos un tag con un nombre de versionamiento y un mensaje de referencia, y este apunta a un hash en especifico
git show nombre-tag: muestra toda la informacion del tag en especifico

//hablando del stash
git stash: guarda los cambios en un directorio de trabajo sucio(boveda) desde el ultimo commit, ahora el stash no es necesario cuando estamos trabajando en una rama diferente al main

git stash: almacena en un stash(boveda) los cambios que no han sido guardados(no se ha subido al stage ni hecho commit)
git stash list: para ver la lista de stash
git stash pop: para traer el ultimo stash a nuestra rama y de pasada elimina ese stash
git stash clear: borra todo los stash 
git stash apply HASH: te trae un stash en especifico segun su hash o identificador
git stash drop: borra el ultimo stash
git stash drop HASH: borra un stash en especifico segun su hash o identificador
git stash show HASH: ver informacion de un stash en especifico(no da casi nada de informacion)
git stash save "nombre al stash": almacena en un stash con un nombre en especifico de los cambios que no han sido guardados
git stash list --stat: para ver la lista de stash pero con informacion

//hablando del rebase
git rebase: nos permite ordenar los commits, corregir mensajes de los commits, unir commits, separar commits

git rebase main: mueve los commits de la rama secundaria un paso adelante del ultimo commit de la rama main
git rebase -i HEAD~numeroUltimosCommits: selecciona el numero de ultimos commits para pasarlo al rebase interactivo
ejm: git rebase -i HEAD~3
     git reabse -i HASH

git checkout -- nombreArchivo: nos permite reconstruir el archivo a como estaba antes de realizar una modificación
git reset HEAD^: es lo mismo que git reset --mixed HEAD^
git rebase --continue: nos permite salir del rebase interactivo cuando hacemos un edit

//hablando del remote
git remote add origin URL-GITHUB:nos permite agregar un origen remoto
*add= nos permite agregar un nuevo remote
*origin= es el nombre que nosotros le queremos dar a ese repositorio(remote)
*URL-GITHUB= es la url donde se encuentra nuestro repositorio

git remote -v: cuando queremos revisar los remotos o las fuentes remotas de nuestro repositorio
git push -u origin main:
*origin= nombre del repositorio(remote)
*main=rama que deseamos enviar
*-u= nos ayuda a que la proxima vez que queramos hacer push, no necesitemos especificar la rama 
git push: para subir nuestros cambios a github(repositorio remoto)
git push --tags: nos permite subir nuestros tags(etiquetas)
git pull origin main
git pull: traer los datos o cambios que se encuentran en nuestro repositorio remoto y actualizar al instante el repositorio local para reflejar ese contenido o cambio